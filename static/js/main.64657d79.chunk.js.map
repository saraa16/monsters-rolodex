{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"yUAGaA,EAAM,SAACC,GAAD,OAChB,sBAAKC,UAAW,iBAAhB,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCHMC,EAAW,SAAAR,GACpB,OACA,qBAAKC,UAAW,YAAhB,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAAUA,GAAtBA,EAAQC,UCLjBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACtB,uBACIZ,UAAY,SACZa,KAAM,SACNF,YAAcA,EACdG,SAAWF,MC+BJG,E,kDAjCb,aAAc,IAAD,8BACX,gBAaFH,aAAc,SAACI,GAAO,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZzD,EAAKC,MAAM,CACTb,SAAU,GACVU,YAAa,IAJJ,E,qDAQb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAASkB,S,oBAMzC,WACE,MAAgCC,KAAKN,MAA9Bb,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYc,wBACpG,OACA,sBAAKhC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAc,kBACdC,aAAgBe,KAAKf,eAEvB,cAAC,EAAD,CAAUJ,SAAYoB,W,GA5BVK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,EAAgBa,QAAQC,O","file":"static/js/main.64657d79.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.styles.css';\r\n\r\nexport const Card =(props) => (\r\n   <div className= 'card-container'>\r\n       <img alt='monster' src= {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n       <h2> {props.monster.name} </h2>\r\n       <p> {props.monster.email} </p>\r\n   </div> \r\n)","import React from \"react\";\r\nimport './card-list.styles.css';\r\nimport { Card } from \"../card/card.component\";\r\n\r\nexport const CardList = props => {\r\n    return(\r\n    <div className= 'card-list'>\r\n        {props.monsters.map(monster =>( \r\n            <Card key={monster.id} monster= {monster}/>))}\r\n        \r\n    </div>)\r\n};","import React from \"react\";\r\nimport './search-box.styles.css';\r\n\r\nexport const  SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n        className = 'search'\r\n        type= 'search' \r\n        placeholder= {placeholder}\r\n        onChange ={handleChange} \r\n    />\r\n);","import './App.css';\nimport { Component } from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}))\n  }\n\n  handleChange= (e) => {this.setState({searchField: e.target.value});\n  }\n\n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLocaleLowerCase()))\n    return(\n    <div className='App'>\n      <h1>Monsters Rolodex</h1>\n      <SearchBox \n        placeholder = 'search monsters'\n        handleChange = {this.handleChange}\n      />\n      <CardList monsters = {filteredMonsters}/>\n    </div>\n    );\n  }\n} \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}